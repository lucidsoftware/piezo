name: CI
on:
  pull_request:
  push:
    branches:
      - master
    tags:
      - "*.*.*"

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Set Env
        if: ${{ github.repository == 'lucidsoftware/piezo' }}
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            version="${GITHUB_REF#refs/tags/}"
          else
            version="${GITHUB_REF#refs/branches/}-SNAPSHOT"
          fi
          echo "VERSION=$version" >> $GITHUB_ENV
          echo "SBT_OPTS=-Dbuild.version=$version" >> $GITHUB_ENV
      - name: Test
        run: sbt compile test doc Debian/packageBin
      - name: Publish to Sonatype
        if: ${{ github.repository == 'lucidsoftware/piezo' }}
        env:
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
        run: |
          echo "$PGP_SECRET" | base64 --decode | gpg --import
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            sbt '; publishSigned; sonatypeBundleRelease'
          else
            sbt publishSigned
          fi
      - name: Publish Deb to Artifactory
        if: ${{ github.action_name == 'push' && startsWith(github.ref, 'refs/tags/') && github.repository == 'lucidsoftware/piezo' }}
        env:
          ARTIFACTORY_TOKEN: ${{ secrets.ARTIFACTORY_TOKEN }}
        run: |
          curl --silent --fail --show-error -H "Authorization: Bearer $ARTIFACTORY_TOKEN" --upload-file "admin/target/piezo-admin_${VERSION}_all.deb" \
              "https://lucidsoftware.jfrog.io/artifactory/piezo/pool/piezo-admin_${VERSION}_all.deb;deb.distribution=piezo;deb.component=main;deb.architecture=all"
      - name: Upload assets to Github
        if: ${{ github.action_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x
          args=$(printf -- "-a %q " {admin,worker}/target/**/*.jar)
          hub release create $args -m "Release $VERSION" $VERSION
